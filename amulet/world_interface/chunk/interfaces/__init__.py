from __future__ import annotations

import os
import numpy
from typing import Tuple, Any, Union, Callable

from amulet.api.chunk import Chunk
from amulet.world_interface.chunk import translators
from amulet.world_interface.loader import Loader
import amulet_nbt as nbt
import PyMCTranslate

SUPPORTED_INTERFACE_VERSION = 0
SUPPORTED_META_VERSION = 0

INTERFACES_DIRECTORY = os.path.dirname(__file__)

loader = Loader('interface', INTERFACES_DIRECTORY, SUPPORTED_META_VERSION, SUPPORTED_INTERFACE_VERSION)


class Interface:
    def decode_and_translate(
        self,
        max_world_version: Tuple[str, Union[int, Tuple[int, int, int]]],
        data: Union[nbt.NBTFile, Any],
        translation_manager: PyMCTranslate.TranslationManager,
        callback: Callable,
        full_translate: bool
    ) -> Tuple[Chunk, numpy.ndarray]:
        """
        Create an amulet.api.chunk.Chunk object from raw data given by the format and translate into the universal format.
        :param max_world_version:
        :param data: Raw chunk data provided by the format.
        :param translation_manager:
        :param callback:
        :param full_translate:
        :return: Chunk object in universal format, along with the palette for that chunk.
        """
        raise NotImplementedError()

    def translate_and_encode(
        self,
        max_world_version: Tuple[str, Union[int, Tuple[int, int, int]]],
        chunk: Chunk,
        palette: numpy.ndarray,
        translation_manager: PyMCTranslate.TranslationManager,
        callback: Callable,
        full_translate: bool
    ) -> Union[nbt.NBTFile, Any]:
        """
        Translate a universal chunk and encode it to raw data for the format to store.
        :param max_world_version:
        :param chunk: The universal chunk to translate and encode.
        :param palette: The palette the ids in the chunk correspond to.
        :param translation_manager:
        :param callback:
        :param full_translate:
        :return: Raw data to be stored by the format.
        """
        raise NotImplementedError()

    def _get_translator(self, max_world_version: Tuple[str, Union[int, Tuple[int, int, int]]], data: Any = None) -> translators.Translator:
        """
        Return the translator given chunk coordinates.

        :param max_world_version: The version identifier.
        :param data: The data passed in to translate. (optional)
        :return: The translator key for the identify method.
        """
        raise NotImplementedError()

    @staticmethod
    def is_valid(key: Tuple) -> bool:
        """
        Returns whether this interface is able to interface with the chunk type with a given identifier key,
        generated by the format.

        :param key: The key who's decodability needs to be checked.
        :return: True if this interface can interface with the chunk version associated with the key, False otherwise.
        """
        raise NotImplementedError()


if __name__ == "__main__":
    import time

    print(loader.get_all())
    time.sleep(1)
    loader.reload()
    print(loader.get_all())
